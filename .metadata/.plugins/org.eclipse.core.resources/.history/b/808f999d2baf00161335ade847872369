package Be.Rochez.DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import Be.Rochez.Classes.Cours;
import Be.Rochez.Classes.ReservationC;

public class ReservationDAO extends DAO<ReservationC> {
	public ReservationDAO(Connection conn) {
	    super(conn);
	  }
	  //Méthode de création de réservation dans la base de données
	  public boolean create(ReservationC obj) {
		  try
		  {
				String query = "INSERT INTO Reservation (SemaineID, Cours_TypeCoursID, MoniteurID, EleveID, ClientID, HoraireID, StatutClient) VALUES (" + obj.GetSemaine().GetId() + ","  + obj.GetCours().GetId() + "," + obj.GetMoniteur().GetId() + "," + obj.GetEleve().GetId() + "," + obj.GetClient().GetId() + "," + obj.GetHoraire().GetId() + "," + obj.GetStatutClient() + ")";
				PreparedStatement s2 = this.connect.prepareStatement(query);
				s2.execute();
				System.out.println("L'ajout s'est effectué correctement");
				return true;
		  }
		  catch(SQLException e)
		  {
			  System.out.println("Erreur lors de la reservation" + e.getMessage());
			  return false;
		  }  
	  }
	  //Méthode permettant de supprimer une réservation dans la base de données tant qu'elle est dans le panier
	  public boolean delete(int numReservation) {
		  try
		  {
			 String query = "DELETE FROM Reservation WHERE ID = " + numReservation;
			 PreparedStatement s = this.connect.prepareStatement(query);
			 s.execute();
			 return true;
		  }
		  catch(SQLException e)
		  {
			  return false;
		  }
	  }
	  public boolean delete(ReservationC obj) {
		  return false;
	  }
	  //Méthode mettant à jour le champs payé dans la base de données
	  public boolean update(ReservationC obj) {
		int valeurStatutClient = -1;
	    try
	    {
	    	String query = "UPDATE Reservation SET StatutClient = " + valeurStatutClient + " WHERE ID = " + obj.GetId();
			PreparedStatement s = this.connect.prepareStatement(query);
			s.execute();
			return true;
	    }
	    catch(SQLException e)
	    {
	    	System.out.println("Erreur" + e.getMessage());
	    	return false;
	    }
	  }
	  public ReservationC find(int id) {
		  
		  return null;
	  }
	  //Méthode vérifiant que aucune autre réservation n'a été faites avec des informations identiques
	  //Permet d'éviter au client de payer deux fois pour la même réservation
	  public int RechercheReservationExistante(ReservationC obj)
	  {
		  try {
			  ResultSet result = this.connect.createStatement(
					  ResultSet.TYPE_SCROLL_INSENSITIVE,
					  ResultSet.CONCUR_READ_ONLY).executeQuery("SELECT * FROM Reservation WHERE SemaineID = " + obj.GetSemaine().GetId() + " AND Cours_TypeCoursID = " + obj.GetCours().GetId() + " AND MoniteurID = " + obj.GetMoniteur().GetId() + " AND EleveID = " + obj.GetEleve().GetId() + " AND ClientID = " + obj.GetClient().GetId() + " AND HoraireID = " + obj.GetHoraire().GetId());
			  if(result.first())
			  {
				  return 1;       
			  }
			  else
			  {
				  return 2;
			  }
		  } 
		  catch (SQLException e) {
			  e.printStackTrace();
			  return 3;
		  }
	  }
	  //Méthode comptant le nombre de réservation pour un cours pour voir si on atteint ou non le nombres d'élève maximum
	  public int CountReservation(ReservationC obj)
	  { 
		  try
		  {
			  ResultSet result = this.connect.createStatement(
					  ResultSet.TYPE_SCROLL_INSENSITIVE,
					  ResultSet.CONCUR_READ_ONLY).executeQuery("SELECT count(*) FROM Reservation WHERE SemaineID = " + obj.GetSemaine().GetId() + " AND Cours_TypeCoursID = " + obj.GetCours().GetId() + " AND MoniteurID = " + obj.GetMoniteur().GetId() + " AND HoraireID = " + obj.GetHoraire().GetId());
			 if(result.first())
				 return result.getInt(1);
			 else
				 return -1;
		  }
		  catch(SQLException e)
		  {
			  return -2;
		  } 
	  }
	  //Méthode récupérant un liste de réservation d'un client pour remplir la liste panier
	  public ArrayList<ReservationC> RecuperationReservationPanier(int idClient)
	  {
		  ReservationC maReservation = new ReservationC();
		  ArrayList<ReservationC> maListeReservation = new ArrayList<ReservationC>();
		  
		  ClientDAO clientDAO = new ClientDAO(ConnexionDAO.getInstance());
		  EleveDAO eleveDAO = new EleveDAO(ConnexionDAO.getInstance());
		  MoniteurDAO moniteurDAO = new MoniteurDAO(ConnexionDAO.getInstance());
		  HoraireDAO horaireDAO = new HoraireDAO(ConnexionDAO.getInstance());
		  SemaineDAO semaineDAO = new SemaineDAO(ConnexionDAO.getInstance());
		  CoursDAO coursDAO = new CoursDAO(ConnexionDAO.getInstance());
		  try {
			  ResultSet result = this.connect.createStatement(
					  ResultSet.TYPE_SCROLL_INSENSITIVE,
					  ResultSet.CONCUR_READ_ONLY).executeQuery("SELECT * FROM Reservation WHERE ClientID = " + idClient + " AND StatutClient = 0");
			 if(result.first())
			 {
				 while(!result.isAfterLast())
				 {
					 maReservation = new ReservationC(
							result.getInt("ID"),
							clientDAO.find(result.getInt("ClientID")),
							eleveDAO.find(result.getInt("EleveID")),
							moniteurDAO.find(result.getInt("MoniteurID")),
							horaireDAO.find(result.getInt("HoraireID")),
							semaineDAO.find(result.getInt("SemaineID")),
							coursDAO.CoursTypeCoursFind(result.getInt("Cours_TypeCoursID")),
							result.getInt("StatutClient")	
							);
					 maListeReservation.add(maReservation);
					 result.next(); 
				 }
			 }
			 return maListeReservation;
		  }
		  catch (SQLException e) {
			  e.printStackTrace();
			  System.out.println("Erreur de requete " + e.getMessage());
			  return null;
		  }
	  }
	  //Méthode vérifiant si le Client peut bénéficier d'une réduction
	  public int CountReduction(ReservationC obj, int tmpHoraireId)
	  {
		  try
		  {
			  ResultSet result = this.connect.createStatement(
					  ResultSet.TYPE_SCROLL_INSENSITIVE,
					  ResultSet.CONCUR_READ_ONLY).executeQuery("SELECT count(*) FROM Reservation WHERE SemaineID = " + obj.GetSemaine().GetId() +  " AND HoraireID = " + tmpHoraireId + " AND EleveID = " + obj.GetEleve().GetId() + " AND ClientID = " + obj.GetClient().GetId() + " AND StatutClient = 0");
			 if(result.first())
				 return result.getInt(1);
			 else
				 return -1;
		  }
		  catch(SQLException e)
		  {
			  return -2;
		  } 
	  }
	  //Méthode vérifiant si le moniteur est déja occupé pour un autre cours à une date et un horaire donné
	  public boolean MoniteurOccupe(ReservationC obj)
	  {
		  try
		  {
			  ResultSet result = this.connect.createStatement(
					  ResultSet.TYPE_SCROLL_INSENSITIVE,
					  ResultSet.CONCUR_READ_ONLY).executeQuery("SELECT * FROM Reservation WHERE SemaineID = " + obj.GetSemaine().GetId() +  " AND HoraireID = " + obj.GetHoraire().GetId() + " AND MoniteurID = " + obj.GetMoniteur().GetId() + " AND Cours_TypeCoursID != " + obj.GetCours().GetId());
			 if(result.first())
				 return true; 
			 else
				 return false;
		  }
		  catch(SQLException e)
		  {
			  return false;
		  }
	  }
	 public ArrayList<ReservationC> CoursValideMoniteur(int idMoniteur)
	  {
		  ArrayList<ReservationC> mesCoursValide = new ArrayList<ReservationC>();
		  MoniteurDAO moniteurDAO = new MoniteurDAO(ConnexionDAO.getInstance());
		  SemaineDAO semaineDAO = new SemaineDAO(ConnexionDAO.getInstance());
		  HoraireDAO horaireDAO = new HoraireDAO(ConnexionDAO.getInstance());
		  CoursDAO coursDAO = new CoursDAO(ConnexionDAO.getInstance());
		  ReservationC maReservation = new ReservationC();
		  try {
			  ResultSet result = this.connect.createStatement(
					  ResultSet.TYPE_SCROLL_INSENSITIVE,
					  ResultSet.CONCUR_READ_ONLY).executeQuery("SELECT R.MoniteurID, R.HoraireID, R.SemaineID, CT.CoursID, Count(ID) AS CompteReservation FROM Reservation R INNER JOIN Cours_TypeCours CT ON R.Cours_TypeCoursID = CT.ID WHERE MoniteurID = " + idMoniteur + " GROUP BY R.MoniteurID, R.HoraireID, R.SemaineID, CT.CoursID");
			 if(result.first())
			 {
				 while(!result.isAfterLast())
				 {
					 maReservation = new ReservationC(
							 horaireDAO.find(result.getInt("HoraireID")),
							 semaineDAO.find(result.getInt("SemaineID")),
							 coursDAO.find(result.getInt("CoursID"))
							 );
					 System.out.println("CompteReservation");
					 if(maReservation.GetHoraire().GetTypeCours().GetDenomination().equals("Particulier"))
					 {
						 if(result.getInt("CompteReservation") >= maReservation.GetHoraire().GetEleveMinParticulier())
						 {
							 mesCoursValide.add(maReservation);
						 }
					 }
					 else
					 {
						 if(result.getInt("CompteReservation") >= maReservation.GetCours().GetEleveMinimum())
						 {
							 mesCoursValide.add(maReservation);
						 }
					 }
					 result.next(); 
				 }
			 }
		  }
		  catch(SQLException e)
		  {
			  System.out.println("Erreur" + e.getMessage());
		  }
		  return mesCoursValide;
	  }
}